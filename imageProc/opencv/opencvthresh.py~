# coding: utf-8
image cv2
import sv2
import cv2
get_ipython().magic('clear ')
get_ipython().magic('pinfo cv2.imread')
image = cv2.imread('37.bmp')
image
get_ipython().set_next_input('image_bw = cv2.cvtColor');get_ipython().magic('pinfo cv2.cvtColor')
cv2.cvtColor(image, image_bw, BGR2GRAY)
image_bw = cv2.cvtColor(image, BGR2GRAY)
help(cv2)
image_bw = cv2.cvtColor(image, COLOR_BGR2GRAY)
image_bw = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
image_bw
image_bw.shape
image.shape
image_bw[200]
image_bin=cv2.threshold(image_bw,30)
image_bin=cv2.threshold(image_bw,30,maxval=1)
image_bin=cv2.threshold(image_bw,30,maxval=1,type=cv2.THRESH_BINARY)
image_bin
type(image_bin)
s, image_bin =image_bin
image_bin.shape
image_bin[200]
import skimage
import matplotlib.pyplot as plt
plt.figure(1)
plt.imshow(image)
plt.figure(2)
plt.imshow(image_bw)
plt.figure(3)
plt.imshow(image_bin)
plt.show()
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image)
plt.show()
image_w
image_bw
image_bin2 = cv2.adaptiveThreshold(image_bw)
image_bin2 = cv2.adaptiveThreshold(image_bw,maxValue=1)
image_bin2 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C)
image_bin2 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY)
image_bin2 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3)
image_bin2 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=0)
image_bin3 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=0)
plt.figure(1)
plt.imshow(image_bin2)
plt.figure(2)
plt.imshow(image_bin3)
plt.figure(3)
plt.imshow(image_bin)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=0)
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=10)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-10)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=0.5)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=5)
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=0)
plt.imshow(image_bin4)
plt.show()
plt.imshow(image_bin4)
plt.colorbar()
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-1)
plt.imshow(image_bin4)
plt.colorbar()
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-5)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-3)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-3)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_GAUSSIAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-2)
plt.imshow(image_bin4)
plt.show()
image_bin4 = cv2.adaptiveThreshold(image_bw,maxValue=1,adaptiveMethod=cv2.ADAPTIVE_THRESH_MEAN_C,thresholdType=cv2.THRESH_BINARY,blockSize=3,C=-2)
plt.imshow(image_bin4)
plt.show()
get_ipython().magic('pinfo cv2.canny')
get_ipython().magic('pinfo cv2.Canny')
get_ipython().magic('pinfo cv2.arcLength')
perimeter = cv2.arcLength(image_bin4)
perimeter = cv2.arcLength(image_bin4,closed=True)
get_ipython().magic('save ')
